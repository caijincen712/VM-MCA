import torch.nn as nn
import math
import torch


class Mlp(nn.Module):
    def __init__(self, in_features, hidden_features=2048, out_features=512, act_layer=nn.GELU, drop=0.1):
        super().__init__()
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act1 = nn.ReLU()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)
        self.act2 = act_layer()

    def forward(self, x):
        x1 = self.fc1(x)
        x1 = self.act1(x1)
        x2 = self.drop(x1)
        x2 = self.fc2(x2)
        x2 = self.drop(x2)
        return x2

def gmlp_block(x, d_model, d_ffn):
    shortcut = x
    x = norm(x, axis="channel")
    x = proj

class CHABertSelfAttention(nn.Module):
    def __init__(self, d_model, heads, dropout, mlp_hidden_dim=2048, act_layer=nn.GELU):
        super(ECABertSelfAttention, self).__init__()
        if d_model % heads != 0:
            raise ValueError(
                "The hidden size (%d) is not a multiple of the number of attention "
                "heads (%d)" % (d_model, heads))
        self.num_attention_heads = heads 
        self.attention_head_size = int(d_model / heads)  
        self.all_head_size = self.num_attention_heads * self.attention_head_size 

        self.query = nn.Linear(d_model, self.all_head_size)
        self.key = nn.Linear(d_model, self.all_head_size)
        self.value = nn.Linear(d_model, self.all_head_size)
        self.mlp = Mlp(in_features=d_model, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=dropout)

        self.dropout = nn.Dropout(dropout)

    def transpose_for_scores(self, x):
        new_x_shape = x.size()[:-1] + (self.num_attention_heads, self.attention_head_size)  # (N, L, nh, dh)(10,93,8,64)
        x = x.view(*new_x_shape)
        return x.permute(0, 2, 1, 3) 

    def forward(self, query_states, key_states, value_states, attention_mask):
        """
        Args:
            query_states: (N, Lq, D)
            key_states: (N, L, D)
            value_states: (N, L, D)
            attention_mask: (N, Lq, L)
        Returns:
        """
        # only need to mask the dimension where the softmax (last dim) is applied, as another dim (second last)
        # will be ignored in future computation anyway
        attention_mask = (~ attention_mask.unsqueeze(1)) * -10000.  # (N, 1, Lq, L)
        mixed_query_layer = self.query(query_states) 
        mixed_value_layer = self.mlp(value_states)
        query_layer = self.transpose_for_scores(mixed_query_layer)  
        key_layer = self.transpose_for_scores(key_states) 
        value_layer = self.transpose_for_scores(mixed_value_layer) 

        # Take the dot product between "query" and "key" to get the raw attention scores.
        '''CHA_mlp'''
        query_layer = query_layer.softmax(-2).transpose(-1, -2)
        _, _, N, _ = key_layer.shape
        key_layer = torch.nn.functional.adaptive_avg_pool2d(key_layer.softmax(-2), (N, 1))
        
        attention_scores = query_layer @ key_layer
        '''scale'''
        attention_scores = attention_scores / math.sqrt(self.attention_head_size)
        # Apply the attention mask is (precomputed for all layers in BertModel forward() function)
        attention_scores = attention_scores + attention_mask
        # Normalize the attention scores to probabilities.
        attention_probs = torch.sigmoid(attention_scores)
        
        # This is actually dropping out entire tokens to attend to, which might
        # seem a bit unusual, but is taken from the original Transformer paper.
        attention_probs = self.dropout(attention_probs)
        context_layer = attention_probs.transpose(-1, -2) * value_layer
        context_layer = context_layer.permute(0, 2, 1, 3).contiguous()
        new_context_layer_shape = context_layer.size()[:-2] + (self.all_head_size,)
        context_layer = context_layer.view(*new_context_layer_shape)

        return context_layer

