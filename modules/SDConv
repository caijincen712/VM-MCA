from torch import nn
import torch
import math
from torch.nn import functional


class ConvBertSelfAttention(nn.Module):
    def __init__(self, d_model, heads, dropout, head_ratio=2, conv_kernel_size=9):
        super().__init__()
        if d_model % heads != 0 and not hasattr("embedding_size"):
            raise ValueError(
                f"The hidden size ({d_model}) is not a multiple of the number of attention "
                f"heads ({heads})"
            )

        new_num_attention_heads = heads // head_ratio  

        if new_num_attention_heads < 1:
            self.head_ratio = heads
            self.num_attention_heads = 1
        else:
            self.num_attention_heads = new_num_attention_heads
            self.head_ratio = head_ratio

        self.conv_kernel_size = conv_kernel_size  # 9
        assert (
            d_model % self.num_attention_heads == 0
        ), "hidden_size should be divisible by num_attention_heads"

        self.attention_head_size = d_model // heads   
        self.all_head_size = self.num_attention_heads * self.attention_head_size     

        self.query = nn.Linear(d_model, self.all_head_size)   
        self.key = nn.Linear(d_model, self.all_head_size)
        self.value = nn.Linear(d_model, self.all_head_size)

        self.key_conv_attn_layer = SeparableConv1D(
            d_model, self.all_head_size, self.conv_kernel_size
        )    
        self.conv_kernel_layer = nn.Linear(self.all_head_size, self.num_attention_heads * self.conv_kernel_size)
        self.conv_out_layer = nn.Linear(d_model, self.all_head_size)  
        self.unfold = nn.Unfold(
            kernel_size=[self.conv_kernel_size, 1], padding=[int((self.conv_kernel_size - 1) / 2), 0]
        )

        self.dropout = nn.Dropout(dropout)

    def transpose_for_scores(self, x):
        new_x_shape = x.size()[:-1] + (self.num_attention_heads, self.attention_head_size)
        x = x.view(*new_x_shape)
        return x.permute(0, 2, 1, 3)

    def forward(
        self,
        query_states, key_states, value_states, attention_mask,
        encoder_hidden_states=None,
        output_attentions=False,
    ):

        attention_mask = (~ attention_mask.unsqueeze(1)) * -10000.  # (N, 1, Lq, L)
        mixed_query_layer = self.query(query_states)   

        batch_size = query_states.size(0)
        # If this is instantiated as a cross-attention module, the keys
        # and values come from an encoder; the attention mask needs to be
        # such that the encoder's padding tokens are not attended to.
        if encoder_hidden_states is not None:
            mixed_key_layer = self.key(encoder_hidden_states)
            mixed_value_layer = self.value(encoder_hidden_states)
        else:
            mixed_key_layer = self.key(key_states)
            mixed_value_layer = self.value(value_states)

        mixed_key_conv_attn_layer = self.key_conv_attn_layer(key_states.transpose(1, 2))    
        mixed_key_conv_attn_layer = mixed_key_conv_attn_layer.transpose(1, 2)  
        query_layer = self.transpose_for_scores(mixed_query_layer)  
        key_layer = self.transpose_for_scores(mixed_key_layer)      
        value_layer = self.transpose_for_scores(mixed_value_layer)  
   
        conv_attn_layer = torch.multiply(mixed_key_conv_attn_layer, mixed_query_layer)    
        conv_kernel_layer = self.conv_kernel_layer(conv_attn_layer)    
        conv_kernel_layer = torch.reshape(conv_kernel_layer, [-1, self.conv_kernel_size, 1]) 
        conv_kernel_layer = torch.softmax(conv_kernel_layer, dim=1)     
        '''LConv'''
        conv_out_layer = self.conv_out_layer(value_states) 
        conv_out_layer = torch.reshape(conv_out_layer, [batch_size, -1, self.all_head_size]) 
        conv_out_layer = conv_out_layer.transpose(1, 2).contiguous().unsqueeze(-1)  
        conv_out_layer = nn.functional.unfold(
            conv_out_layer,
            kernel_size=[self.conv_kernel_size, 1],
            dilation=1,
            padding=[(self.conv_kernel_size - 1) // 2, 0],
            stride=1,
        )                                           

        conv_out_layer = conv_out_layer.transpose(1, 2).reshape(
            batch_size, -1, self.all_head_size, self.conv_kernel_size
        )                                        

        conv_out_layer = torch.reshape(conv_out_layer, [-1, self.attention_head_size, self.conv_kernel_size])
        conv_out_layer = torch.matmul(conv_out_layer, conv_kernel_layer) 
        conv_out_layer = torch.reshape(conv_out_layer, [-1, self.all_head_size]) 

        # Take the dot product between "query" and "key" to get the raw attention scores.
        attention_scores = torch.matmul(query_layer, key_layer.transpose(-1, -2))  
        attention_scores = attention_scores / math.sqrt(self.attention_head_size)   
        attention_scores = attention_scores + attention_mask  
        # Normalize the attention scores to probabilities.
        attention_probs = torch.nn.functional.softmax(attention_scores, dim=-1)   
        # This is actually dropping out entire tokens to attend to, which might
        # seem a bit unusual, but is taken from the original Transformer paper.
        attention_probs = self.dropout(attention_probs)  
        context_layer = torch.matmul(attention_probs, value_layer)  
        context_layer = context_layer.permute(0, 2, 1, 3).contiguous() 
        conv_out = torch.reshape(conv_out_layer, [batch_size, -1, self.num_attention_heads, self.attention_head_size])
        
        context_layer = torch.cat([context_layer, conv_out], 2)   
        new_context_layer_shape = context_layer.size()[:-2] + (self.head_ratio * self.all_head_size,)
        context_layer = context_layer.view(*new_context_layer_shape)  
        outputs = (context_layer, attention_probs) if output_attentions else (context_layer,)

        return outputs


class SeparableConv1D(nn.Module):
    """This class implements separable convolution, i.e. a depthwise and a pointwise layer"""

    def __init__(self, input_filters, output_filters, kernel_size=3, initializer_range=0.02, **kwargs):
        super().__init__()
        self.depthwise = nn.Conv1d(
            input_filters,
            input_filters,
            kernel_size=kernel_size,
            groups=input_filters,
            padding=kernel_size // 2,
            bias=False,
        )
        self.pointwise = nn.Conv1d(input_filters, output_filters, kernel_size=1, bias=False)
        self.bias = nn.Parameter(torch.zeros(output_filters, 1))

        self.depthwise.weight.data.normal_(mean=0.0, std=initializer_range)
        self.pointwise.weight.data.normal_(mean=0.0, std=initializer_range)

    def forward(self, hidden_states):
        x = self.depthwise(hidden_states)
        x = self.pointwise(x)
        x += self.bias
        return x
